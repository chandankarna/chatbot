{"ast":null,"code":"var _jsxFileName = \"D:\\\\Growth\\\\Samples\\\\chatbot\\\\src\\\\Components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { TypeAnimation } from \"react-type-animation\";\nimport ChatbotContainer from \"../ChatbotContainer/ChatbotContainer\";\nimport chatData from \"../Chats/Data.json\";\nimport sampleChat from \"../Chats/ChatSample.json\";\nimport companyChat from \"../Chats/CompanyChats.json\";\nimport ChatOptions from \"../ChatOptions/ChatOptions\";\nimport \"./Style.scss\";\n\n// Function to call the ChatGPT API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst callChatGPTAPI = async userInput => {\n  try {\n    const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n      messages: [{\n        role: \"system\",\n        content: \"You are a chatbot that can help with various inquiries.\"\n      }, {\n        role: \"user\",\n        content: userInput\n      }]\n    }, {\n      headers: {\n        Authorization: `Bearer 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`\n      }\n    });\n    return response.data; // Return the response data\n  } catch (error) {\n    console.error(\"Error calling ChatGPT API:\", error.message);\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      console.error(\"Server responded with:\", error.response.data);\n      console.error(\"Status code:\", error.response.status);\n      console.error(\"Headers:\", error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.error(\"No response received. Check your internet connection.\");\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.error(\"Error setting up the request:\", error.message);\n    }\n    throw error;\n  }\n};\nconst Chatbot = () => {\n  _s();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [rememberedInfo, setRememberedInfo] = useState(null);\n  const [rememberMode, setRememberMode] = useState(false);\n  const [chatOptionsEnabled, setChatOptionsEnabled] = useState(true); // State to track whether chat options are enabled or not\n  const chatContainerRef = useRef(null);\n\n  // Optional chatbot\n  const handleToggleChatOptions = () => {\n    setChatOptionsEnabled(!chatOptionsEnabled); // Toggle the chatOptionsEnabled state\n    if (!chatOptionsEnabled) {\n      // If chat options are disabled, clear chat messages and user input\n      setChatMessages([]);\n      setUserInput(\"\");\n    }\n  };\n\n  // Function to simulate typing effect and AI-like response delay\n  const simulateTypingEffect = (message, delay) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(message);\n      }, delay);\n    });\n  };\n  const handleSendMessage = async event => {\n    event.preventDefault();\n    const trimmedInput = userInput.trim();\n    if (chatOptionsEnabled) {\n      return;\n    }\n    if (trimmedInput !== \"\") {\n      // Check if the user wants the chatbot to remember something\n      if (trimmedInput.toLowerCase().startsWith(\"remember\")) {\n        // Enter remembering mode\n        setRememberMode(true);\n        const rememberResponse = {\n          user: false,\n          message: \"Sure, I can remember one thing at a time. Please tell me what you want me to remember:\"\n        };\n        setChatMessages(prevMessages => [...prevMessages, rememberResponse]);\n        setUserInput(\"\");\n      } else if (rememberMode) {\n        // If the chatbot is in the remembering mode, store the information and exit remembering mode\n        const infoToRemember = trimmedInput;\n        setRememberedInfo({\n          text: infoToRemember,\n          timestamp: Date.now()\n        });\n        setRememberMode(false);\n\n        // Add a response indicating that the chatbot has remembered the information\n        const rememberResponse = {\n          user: false,\n          message: `Sure, I will remember: \"${infoToRemember}\" for the next 5-10 minutes.`\n        };\n        setChatMessages(prevMessages => [...prevMessages, aiMessage]);\n        setUserInput(\"\");\n\n        // Provide an AI-like response to the user's input after a delay\n        const aiResponse = await simulateTypingEffect(\"Great! How can I assist you further?\", 800);\n        const aiMessage = {\n          user: false,\n          message: aiResponse\n        };\n        setChatMessages(prevMessages => [...prevMessages, aiMessage]);\n        setUserInput(\"\");\n      } else if (trimmedInput.toLowerCase().includes(\"what did i tell you to remember\")) {\n        // Check if the user wants to know what they asked the chatbot to remember\n        if (rememberedInfo) {\n          // If the chatbot is remembering something, provide the remembered information\n          const rememberedResponse = {\n            user: false,\n            message: `You asked me to remember: \"${rememberedInfo.text}\"`\n          };\n          setChatMessages(prevMessages => [...prevMessages, rememberedResponse]);\n          setUserInput(\"\");\n        } else {\n          // If the chatbot is not remembering anything, inform the user\n          const noMemoryResponse = {\n            user: false,\n            message: \"I don't have anything to remember at the moment.\"\n          };\n          setChatMessages(prevMessages => [...prevMessages, noMemoryResponse]);\n\n          // Call the ChatGPT API outside of the conditional blocks\n          const apiResponse = await callChatGPTAPI(trimmedInput);\n        }\n      } else {\n        // If the user is not asking the chatbot to remember or inquire about the remembered information\n\n        // Create a new message object\n        const newMessage = {\n          user: true,\n          message: trimmedInput\n        };\n\n        // Add the new message to the chat messages\n        setChatMessages(prevMessages => [...prevMessages, newMessage]);\n\n        // Clear the user input\n        setUserInput(\"\");\n\n        // Scroll to the bottom of the chat container\n        scrollToBottomWithAnimation();\n\n        // Generate chatbot response after a delay\n        setTimeout(() => {\n          generateChatbotResponse(trimmedInput);\n        }, 1500);\n      }\n\n      //  For ChatGPT Response\n    }\n  };\n\n  // Function to handle the selected sub-option and update the chat messages\n  const handleChatOptionSelect = response => {\n    // Create a new message object\n    const newMessage = {\n      user: false,\n      message: response\n    };\n    // Add the new message to the chat messages\n    setChatMessages(prevMessages => [...prevMessages, newMessage]);\n  };\n\n  // Generate a response from the chatbot\n  // ... (previous code)\n\n  const generateChatbotResponse = async userMessage => {\n    const matchingResponses = filterResponses(userMessage);\n    if (matchingResponses.length > 0) {\n      // If a matching response is found, create a new message object\n      const matchedResponse = matchingResponses[0];\n      const newMessage = {\n        user: false,\n        message: matchedResponse.answer\n      };\n      // Add the new message to the chat messages\n      setChatMessages(prevMessages => [...prevMessages, newMessage]);\n    } else if (userMessage.toLowerCase().includes(\"current time\")) {\n      // If the user asks for the current time, generate a response with the current time\n      const currentTime = new Date().toLocaleTimeString();\n      const timeResponse = {\n        user: false,\n        message: `The current time is: ${currentTime}`\n      };\n\n      // Add the time response to the chat messages\n      setChatMessages(prevMessages => [...prevMessages, timeResponse]);\n    } else if (userMessage.toLowerCase().includes(\"current date\")) {\n      // If the user asks for the current date, generate a response with the current date\n      const currentDate = new Date().toLocaleDateString();\n      const dateResponse = {\n        user: false,\n        message: `The current date is: ${currentDate}`\n      };\n\n      // Add the date response to the chat messages\n      setChatMessages(prevMessages => [...prevMessages, dateResponse]);\n    } else {\n      // If no matching response is found and it's not a current time/date query,\n      // handle complex math expressions or provide a default message\n      try {\n        // Use a custom math parser function to handle complex math expressions\n        const result = evaluateMathExpression(userMessage);\n        if (typeof result === \"number\" && !isNaN(result) && isFinite(result)) {\n          // If the result is a valid number, create a response with the result\n          const formattedResult = parseFloat(result.toFixed(2)); // Show the result with two decimal places\n          const mathResponse = {\n            user: false,\n            message: `The result of ${userMessage} is: ${formattedResult}`\n          };\n\n          // Add the math response to the chat messages\n          setChatMessages(prevMessages => [...prevMessages, mathResponse]);\n        } else {\n          // If the result is not a valid number (e.g., Infinity, NaN), provide a default message\n          const defaultMessage = {\n            user: false,\n            message: \"Sorry, the calculation result is not valid or exceeds the limit I can handle.\"\n          };\n\n          // Add the default message to the chat messages\n          setChatMessages(prevMessages => [...prevMessages, defaultMessage]);\n        }\n      } catch (error) {\n        // If there is an error in evaluating the expression, provide a default message\n        const defaultMessage = {\n          user: false,\n          message: \"Sorry, but I'm programmed to provide information and assistance related to the stock market and our company, Growth Securities. If you have any queries or need guidance in these areas, please feel free to ask. Otherwise, please type another related word or rephrase your question.\"\n        };\n\n        // Add the default message to the chat messages\n        setChatMessages(prevMessages => [...prevMessages, defaultMessage]);\n      }\n    }\n\n    // Simulate typing effect and provide additional AI-like responses after a delay\n    const aiResponses = [\"I'm here to help you!\", \"Sure, I'm ready to assist.\", \"You're doing great! Keep going.\", \"Hmm, let me think...\", \"I'm learning every day to be more helpful!\", \"Great! How can I assist you further?\", \"You got it! I'm here to answer your questions.\"];\n    const aiResponse = await simulateTypingEffect(aiResponses[Math.floor(Math.random() * aiResponses.length)], 800);\n    const aiMessage = {\n      user: false,\n      message: aiResponse\n    };\n    setChatMessages(prevMessages => [...prevMessages, aiMessage]);\n\n    // Check for stock market related interactions and add funny quotes, emojis, or appreciation\n    if (userMessage.toLowerCase().includes(\"stock\") || userMessage.toLowerCase().includes(\"market\")) {\n      const stockResponses = [\"Stock market is fascinating, isn't it?\", \"Remember, investing is a long-term game.\", \"Invest in knowledge before investing in stocks.\", \"I wish I could invest in humor, it would never go down.\", \"Let's stock up some knowledge!\", \"In the stock market, the only thing that goes up and down is your heartbeat.\"];\n      const stockResponse = await simulateTypingEffect(stockResponses[Math.floor(Math.random() * stockResponses.length)], 1200);\n      const stockMessage = {\n        user: false,\n        message: stockResponse\n      };\n      setChatMessages(prevMessages => [...prevMessages, stockMessage]);\n    } else if (userMessage.toLowerCase().includes(\"thank\") || userMessage.toLowerCase().includes(\"appreciate\")) {\n      const appreciationResponses = [\"You're welcome! 😊\", \"Glad I could help!\", \"Always here to assist you.\", \"It's my pleasure to be of service.\", \"Thank you for your kind words!\"];\n      const appreciationResponse = await simulateTypingEffect(appreciationResponses[Math.floor(Math.random() * appreciationResponses.length)], 1400);\n      const appreciationMessage = {\n        user: false,\n        message: appreciationResponse\n      };\n      setChatMessages(prevMessages => [...prevMessages, appreciationMessage]);\n    }\n\n    // Add funny and engaging responses with emojis\n    // const emojis = [\"😄\", \"😃\", \"😆\", \"🤣\", \"😂\", \"😊\", \"😉\", \"🙂\", \"🤗\", \"😎\"];\n    //   const funnyResponses = [\n    //     \"Haha, that's a good one!\",\n    //     \"LOL! You crack me up!\",\n    //     \"You're hilarious! 😄\",\n    //     \"I'm ROFLing right now! 😂\",\n    //     \"Good one! Keep 'em coming!\",\n    //     \"You've got a great sense of humor!\",\n    //     \"Hahaha! I'm rolling on the floor!\",\n    //     \"That's a knee-slapper!\",\n    //   ];\n\n    //   // const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\n    //   const randomFunnyResponse =\n    //     funnyResponses[Math.floor(Math.random() * funnyResponses.length)];\n    //   const funnyMessage = {\n    //     user: false,\n    //     message: randomFunnyResponse,\n    //     // message: `${randomEmoji} ${randomFunnyResponse}`,\n    //   };\n\n    //   setChatMessages((prevMessages) => [...prevMessages, funnyMessage]);\n  };\n\n  // Helper function to evaluate complex math expressions\n  const evaluateMathExpression = expression => {\n    // Implement your custom math parser here, or use existing libraries like 'math.js'\n    // For this example, I'll use the built-in 'eval()' function\n    return eval(expression);\n  };\n\n  // Filter the responses based on user input\n  const filterResponses = userMessage => {\n    const matchingResponses = [];\n    const filterQuery = query => {\n      const trimmedQuery = query.toLowerCase().trim();\n      return trimmedQuery === userMessage.toLowerCase();\n    };\n\n    // Filter responses from the chatData\n    if (chatData && chatData.responses && Array.isArray(chatData.responses)) {\n      chatData.responses.forEach(response => {\n        const queries = response.query.toLowerCase().split(\",\").map(query => query.trim());\n        if (queries.some(filterQuery)) {\n          matchingResponses.push(response);\n        }\n      });\n    } else {\n      console.error(\"chatData is missing or not properly formatted.\");\n    }\n\n    // Filter responses from the sampleChat\n    if (sampleChat && sampleChat.responses && Array.isArray(sampleChat.responses)) {\n      sampleChat.responses.forEach(response => {\n        const queries = response.query.toLowerCase().split(\",\").map(query => query.trim());\n        if (queries.some(filterQuery)) {\n          matchingResponses.push(response);\n        }\n      });\n    } else {\n      console.error(\"sampleChat is missing or not properly formatted.\");\n    }\n\n    // Filter responses from the companyChat\n    if (companyChat && companyChat.responses && Array.isArray(companyChat.responses)) {\n      companyChat.responses.forEach(response => {\n        const queries = response.query.toLowerCase().split(\",\").map(query => query.trim());\n        if (queries.some(filterQuery)) {\n          matchingResponses.push(response);\n        }\n      });\n    } else {\n      console.error(\"companyChat is missing or not properly formatted.\");\n    }\n    return matchingResponses;\n  };\n\n  // Handler for updating user input\n  const handleChangeUserInput = event => {\n    setUserInput(event.target.value);\n  };\n\n  // Scroll to the bottom of the chat container with animation\n  const scrollToBottomWithAnimation = () => {\n    const chatContainer = chatContainerRef.current;\n    if (chatContainer) {\n      chatContainer.scrollTo({\n        top: chatContainer.scrollHeight,\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // Initialize the chat with sample messages\n  const initializeChat = () => {\n    if (sampleChat && sampleChat.messages && Array.isArray(sampleChat.messages)) {\n      const initialMessages = sampleChat.messages.map(message => ({\n        user: message.user,\n        message: message.message\n      }));\n      setChatMessages(initialMessages);\n    } else {\n      console.error(\"Sample chat messages are missing or not properly formatted.\");\n    }\n  };\n  useEffect(() => {\n    const clearRememberedInfo = () => {\n      setRememberedInfo(null);\n      // Optionally, you can add a response indicating that the chatbot has forgotten the information.\n      // For example:\n      // const forgetResponse = {\n      //   user: false,\n      //   message: `I have forgotten the information I previously remembered.`,\n      // };\n      // setChatMessages((prevMessages) => [...prevMessages, forgetResponse]);\n    };\n\n    // Set a timer to clear the remembered information after the specified duration (e.g., 5 minutes)\n    const timer = setTimeout(clearRememberedInfo, 5 * 60 * 1000); // 5 minutes (in milliseconds)\n\n    // Clean up the timer when the component is unmounted or the rememberedInfo state changes\n    return () => clearTimeout(timer);\n  }, [rememberedInfo]);\n\n  // Initialize the chat on component mount\n  useEffect(() => {\n    initializeChat();\n  }, []);\n\n  // Scroll to the bottom of the chat container when chat messages change\n  useEffect(() => {\n    scrollToBottomWithAnimation();\n  }, [chatMessages]);\n\n  // Scroll to the bottom of the chat container when the chat container ref changes\n  useEffect(() => {\n    scrollToBottomWithAnimation();\n  }, [chatContainerRef.current]);\n\n  // Render the Chatbot component\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper centerBody\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centerBot\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typer\",\n          children: /*#__PURE__*/_jsxDEV(TypeAnimation, {\n            sequence: [\"Welcome to our Growth chatbot! I'm San, your vertual assistant. How can I assist you today? Feel free to ask any questions or seek guidance on your journey! 😊\"],\n            wrapper: \"div\",\n            cursor: false,\n            repeat: true,\n            style: {\n              color: \"#269ed6\",\n              fontSize: \"14px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleToggleChatOptions,\n          className: \"chatbotOption\",\n          children: chatOptionsEnabled ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chatbotOptionText animated\",\n            children: [\"Enable Typing \", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-keyboard-o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chatbotOptionText\",\n            children: [\"Enable Option \", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-gear fa-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this), chatOptionsEnabled ? /*#__PURE__*/_jsxDEV(ChatOptions, {\n          handleChatOptionSelect: handleChatOptionSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(ChatbotContainer, {\n          chatMessages: chatMessages,\n          userInput: userInput,\n          handleChangeUserInput: handleChangeUserInput,\n          handleSendMessage: handleSendMessage,\n          chatContainerRef: chatContainerRef,\n          chatOptionsEnabled: chatOptionsEnabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Chatbot, \"TSlvVjKuWUSLOwbeys8p3YOg7+I=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","TypeAnimation","ChatbotContainer","chatData","sampleChat","companyChat","ChatOptions","jsxDEV","_jsxDEV","Fragment","_Fragment","callChatGPTAPI","userInput","response","post","messages","role","content","headers","Authorization","data","error","console","message","status","request","Chatbot","_s","chatMessages","setChatMessages","setUserInput","rememberedInfo","setRememberedInfo","rememberMode","setRememberMode","chatOptionsEnabled","setChatOptionsEnabled","chatContainerRef","handleToggleChatOptions","simulateTypingEffect","delay","Promise","resolve","setTimeout","handleSendMessage","event","preventDefault","trimmedInput","trim","toLowerCase","startsWith","rememberResponse","user","prevMessages","infoToRemember","text","timestamp","Date","now","aiMessage","aiResponse","includes","rememberedResponse","noMemoryResponse","apiResponse","newMessage","scrollToBottomWithAnimation","generateChatbotResponse","handleChatOptionSelect","userMessage","matchingResponses","filterResponses","length","matchedResponse","answer","currentTime","toLocaleTimeString","timeResponse","currentDate","toLocaleDateString","dateResponse","result","evaluateMathExpression","isNaN","isFinite","formattedResult","parseFloat","toFixed","mathResponse","defaultMessage","aiResponses","Math","floor","random","stockResponses","stockResponse","stockMessage","appreciationResponses","appreciationResponse","appreciationMessage","expression","eval","filterQuery","query","trimmedQuery","responses","Array","isArray","forEach","queries","split","map","some","push","handleChangeUserInput","target","value","chatContainer","current","scrollTo","top","scrollHeight","behavior","initializeChat","initialMessages","clearRememberedInfo","timer","clearTimeout","children","className","sequence","wrapper","cursor","repeat","style","color","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","_c","$RefreshReg$"],"sources":["D:/Growth/Samples/chatbot/src/Components/Chatbot/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TypeAnimation } from \"react-type-animation\";\r\nimport ChatbotContainer from \"../ChatbotContainer/ChatbotContainer\";\r\nimport chatData from \"../Chats/Data.json\";\r\nimport sampleChat from \"../Chats/ChatSample.json\";\r\nimport companyChat from \"../Chats/CompanyChats.json\";\r\nimport ChatOptions from \"../ChatOptions/ChatOptions\";\r\n\r\nimport \"./Style.scss\";\r\n\r\n// Function to call the ChatGPT API\r\nconst callChatGPTAPI = async (userInput) => {\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://api.openai.com/v1/chat/completions\",\r\n      {\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: \"You are a chatbot that can help with various inquiries.\",\r\n          },\r\n          { role: \"user\", content: userInput },\r\n        ],\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer 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`,\r\n        },\r\n      }\r\n    );\r\n\r\n    return response.data; // Return the response data\r\n  } catch (error) {\r\n    console.error(\"Error calling ChatGPT API:\", error.message);\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      console.error(\"Server responded with:\", error.response.data);\r\n      console.error(\"Status code:\", error.response.status);\r\n      console.error(\"Headers:\", error.response.headers);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.error(\"No response received. Check your internet connection.\");\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.error(\"Error setting up the request:\", error.message);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\nconst Chatbot = () => {\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [rememberedInfo, setRememberedInfo] = useState(null);\r\n  const [rememberMode, setRememberMode] = useState(false);\r\n  const [chatOptionsEnabled, setChatOptionsEnabled] = useState(true); // State to track whether chat options are enabled or not\r\n  const chatContainerRef = useRef(null);\r\n\r\n  // Optional chatbot\r\n  const handleToggleChatOptions = () => {\r\n    setChatOptionsEnabled(!chatOptionsEnabled); // Toggle the chatOptionsEnabled state\r\n    if (!chatOptionsEnabled) {\r\n      // If chat options are disabled, clear chat messages and user input\r\n      setChatMessages([]);\r\n      setUserInput(\"\");\r\n    }\r\n  };\r\n\r\n  // Function to simulate typing effect and AI-like response delay\r\n  const simulateTypingEffect = (message, delay) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(message);\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const handleSendMessage = async (event) => {\r\n    event.preventDefault();\r\n    const trimmedInput = userInput.trim();\r\n    if (chatOptionsEnabled) {\r\n      return;\r\n    }\r\n    if (trimmedInput !== \"\") {\r\n      // Check if the user wants the chatbot to remember something\r\n      if (trimmedInput.toLowerCase().startsWith(\"remember\")) {\r\n        // Enter remembering mode\r\n        setRememberMode(true);\r\n        const rememberResponse = {\r\n          user: false,\r\n          message:\r\n          \"Sure, I can remember one thing at a time. Please tell me what you want me to remember:\",\r\n        };\r\n        setChatMessages((prevMessages) => [...prevMessages, rememberResponse]);\r\n        setUserInput(\"\");\r\n      } else if (rememberMode) {\r\n        // If the chatbot is in the remembering mode, store the information and exit remembering mode\r\n        const infoToRemember = trimmedInput;\r\n        setRememberedInfo({ text: infoToRemember, timestamp: Date.now() });\r\n        setRememberMode(false);\r\n\r\n        // Add a response indicating that the chatbot has remembered the information\r\n        const rememberResponse = {\r\n          user: false,\r\n          message: `Sure, I will remember: \"${infoToRemember}\" for the next 5-10 minutes.`,\r\n        };\r\n        setChatMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n\r\n        setUserInput(\"\");\r\n\r\n        // Provide an AI-like response to the user's input after a delay\r\n        const aiResponse = await simulateTypingEffect(\r\n          \"Great! How can I assist you further?\",\r\n          800\r\n        );\r\n        const aiMessage = {\r\n          user: false,\r\n          message: aiResponse,\r\n        };\r\n\r\n        setChatMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n\r\n        setUserInput(\"\");\r\n      } else if (\r\n        trimmedInput.toLowerCase().includes(\"what did i tell you to remember\")\r\n      ) {\r\n        // Check if the user wants to know what they asked the chatbot to remember\r\n        if (rememberedInfo) {\r\n          // If the chatbot is remembering something, provide the remembered information\r\n          const rememberedResponse = {\r\n            user: false,\r\n            message: `You asked me to remember: \"${rememberedInfo.text}\"`,\r\n          };\r\n          setChatMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            rememberedResponse,\r\n          ]);\r\n\r\n          setUserInput(\"\");\r\n        } else {\r\n          // If the chatbot is not remembering anything, inform the user\r\n          const noMemoryResponse = {\r\n            user: false,\r\n            message: \"I don't have anything to remember at the moment.\",\r\n          };\r\n          setChatMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            noMemoryResponse,\r\n          ]);\r\n\r\n          // Call the ChatGPT API outside of the conditional blocks\r\n          const apiResponse = await callChatGPTAPI(trimmedInput);\r\n        }\r\n      } else {\r\n        // If the user is not asking the chatbot to remember or inquire about the remembered information\r\n\r\n        // Create a new message object\r\n        const newMessage = {\r\n          user: true,\r\n          message: trimmedInput,\r\n        };\r\n\r\n        // Add the new message to the chat messages\r\n        setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n        // Clear the user input\r\n        setUserInput(\"\");\r\n\r\n        // Scroll to the bottom of the chat container\r\n        scrollToBottomWithAnimation();\r\n\r\n        // Generate chatbot response after a delay\r\n        setTimeout(() => {\r\n          generateChatbotResponse(trimmedInput);\r\n        }, 1500);\r\n      }\r\n\r\n      //  For ChatGPT Response\r\n    }\r\n  };\r\n\r\n  // Function to handle the selected sub-option and update the chat messages\r\n  const handleChatOptionSelect = (response) => {\r\n    // Create a new message object\r\n    const newMessage = {\r\n      user: false,\r\n      message: response,\r\n    };\r\n    // Add the new message to the chat messages\r\n    setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n  };\r\n\r\n  // Generate a response from the chatbot\r\n  // ... (previous code)\r\n\r\n  const generateChatbotResponse = async (userMessage) => {\r\n    const matchingResponses = filterResponses(userMessage);\r\n\r\n    if (matchingResponses.length > 0) {\r\n      // If a matching response is found, create a new message object\r\n      const matchedResponse = matchingResponses[0];\r\n      const newMessage = {\r\n        user: false,\r\n        message: matchedResponse.answer,\r\n      };\r\n      // Add the new message to the chat messages\r\n      setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n    } else if (userMessage.toLowerCase().includes(\"current time\")) {\r\n      // If the user asks for the current time, generate a response with the current time\r\n      const currentTime = new Date().toLocaleTimeString();\r\n      const timeResponse = {\r\n        user: false,\r\n        message: `The current time is: ${currentTime}`,\r\n      };\r\n\r\n      // Add the time response to the chat messages\r\n      setChatMessages((prevMessages) => [...prevMessages, timeResponse]);\r\n    } else if (userMessage.toLowerCase().includes(\"current date\")) {\r\n      // If the user asks for the current date, generate a response with the current date\r\n      const currentDate = new Date().toLocaleDateString();\r\n      const dateResponse = {\r\n        user: false,\r\n        message: `The current date is: ${currentDate}`,\r\n      };\r\n\r\n      // Add the date response to the chat messages\r\n      setChatMessages((prevMessages) => [...prevMessages, dateResponse]);\r\n    } else {\r\n      // If no matching response is found and it's not a current time/date query,\r\n      // handle complex math expressions or provide a default message\r\n      try {\r\n        // Use a custom math parser function to handle complex math expressions\r\n        const result = evaluateMathExpression(userMessage);\r\n        if (typeof result === \"number\" && !isNaN(result) && isFinite(result)) {\r\n          // If the result is a valid number, create a response with the result\r\n          const formattedResult = parseFloat(result.toFixed(2)); // Show the result with two decimal places\r\n          const mathResponse = {\r\n            user: false,\r\n            message: `The result of ${userMessage} is: ${formattedResult}`,\r\n          };\r\n\r\n          // Add the math response to the chat messages\r\n          setChatMessages((prevMessages) => [...prevMessages, mathResponse]);\r\n        } else {\r\n          // If the result is not a valid number (e.g., Infinity, NaN), provide a default message\r\n          const defaultMessage = {\r\n            user: false,\r\n            message:\r\n              \"Sorry, the calculation result is not valid or exceeds the limit I can handle.\",\r\n          };\r\n\r\n          // Add the default message to the chat messages\r\n          setChatMessages((prevMessages) => [...prevMessages, defaultMessage]);\r\n        }\r\n      } catch (error) {\r\n        // If there is an error in evaluating the expression, provide a default message\r\n        const defaultMessage = {\r\n          user: false,\r\n          message:\r\n            \"Sorry, but I'm programmed to provide information and assistance related to the stock market and our company, Growth Securities. If you have any queries or need guidance in these areas, please feel free to ask. Otherwise, please type another related word or rephrase your question.\",\r\n        };\r\n\r\n        // Add the default message to the chat messages\r\n        setChatMessages((prevMessages) => [...prevMessages, defaultMessage]);\r\n      }\r\n    }\r\n\r\n    // Simulate typing effect and provide additional AI-like responses after a delay\r\n    const aiResponses = [\r\n      \"I'm here to help you!\",\r\n      \"Sure, I'm ready to assist.\",\r\n      \"You're doing great! Keep going.\",\r\n      \"Hmm, let me think...\",\r\n      \"I'm learning every day to be more helpful!\",\r\n      \"Great! How can I assist you further?\",\r\n      \"You got it! I'm here to answer your questions.\",\r\n    ];\r\n\r\n    const aiResponse = await simulateTypingEffect(\r\n      aiResponses[Math.floor(Math.random() * aiResponses.length)],\r\n      800\r\n    );\r\n    const aiMessage = {\r\n      user: false,\r\n      message: aiResponse,\r\n    };\r\n\r\n    setChatMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n\r\n    // Check for stock market related interactions and add funny quotes, emojis, or appreciation\r\n    if (\r\n      userMessage.toLowerCase().includes(\"stock\") ||\r\n      userMessage.toLowerCase().includes(\"market\")\r\n    ) {\r\n      const stockResponses = [\r\n        \"Stock market is fascinating, isn't it?\",\r\n        \"Remember, investing is a long-term game.\",\r\n        \"Invest in knowledge before investing in stocks.\",\r\n        \"I wish I could invest in humor, it would never go down.\",\r\n        \"Let's stock up some knowledge!\",\r\n        \"In the stock market, the only thing that goes up and down is your heartbeat.\",\r\n      ];\r\n\r\n      const stockResponse = await simulateTypingEffect(\r\n        stockResponses[Math.floor(Math.random() * stockResponses.length)],\r\n        1200\r\n      );\r\n      const stockMessage = {\r\n        user: false,\r\n        message: stockResponse,\r\n      };\r\n\r\n      setChatMessages((prevMessages) => [...prevMessages, stockMessage]);\r\n    } else if (\r\n      userMessage.toLowerCase().includes(\"thank\") ||\r\n      userMessage.toLowerCase().includes(\"appreciate\")\r\n    ) {\r\n      const appreciationResponses = [\r\n        \"You're welcome! 😊\",\r\n        \"Glad I could help!\",\r\n        \"Always here to assist you.\",\r\n        \"It's my pleasure to be of service.\",\r\n        \"Thank you for your kind words!\",\r\n      ];\r\n\r\n      const appreciationResponse = await simulateTypingEffect(\r\n        appreciationResponses[\r\n          Math.floor(Math.random() * appreciationResponses.length)\r\n        ],\r\n        1400\r\n      );\r\n      const appreciationMessage = {\r\n        user: false,\r\n        message: appreciationResponse,\r\n      };\r\n\r\n      setChatMessages((prevMessages) => [...prevMessages, appreciationMessage]);\r\n    }\r\n\r\n    // Add funny and engaging responses with emojis\r\n    // const emojis = [\"😄\", \"😃\", \"😆\", \"🤣\", \"😂\", \"😊\", \"😉\", \"🙂\", \"🤗\", \"😎\"];\r\n  //   const funnyResponses = [\r\n  //     \"Haha, that's a good one!\",\r\n  //     \"LOL! You crack me up!\",\r\n  //     \"You're hilarious! 😄\",\r\n  //     \"I'm ROFLing right now! 😂\",\r\n  //     \"Good one! Keep 'em coming!\",\r\n  //     \"You've got a great sense of humor!\",\r\n  //     \"Hahaha! I'm rolling on the floor!\",\r\n  //     \"That's a knee-slapper!\",\r\n  //   ];\r\n\r\n  //   // const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\r\n  //   const randomFunnyResponse =\r\n  //     funnyResponses[Math.floor(Math.random() * funnyResponses.length)];\r\n  //   const funnyMessage = {\r\n  //     user: false,\r\n  //     message: randomFunnyResponse,\r\n  //     // message: `${randomEmoji} ${randomFunnyResponse}`,\r\n  //   };\r\n\r\n  //   setChatMessages((prevMessages) => [...prevMessages, funnyMessage]);\r\n  };\r\n\r\n  // Helper function to evaluate complex math expressions\r\n  const evaluateMathExpression = (expression) => {\r\n    // Implement your custom math parser here, or use existing libraries like 'math.js'\r\n    // For this example, I'll use the built-in 'eval()' function\r\n    return eval(expression);\r\n  };\r\n\r\n  // Filter the responses based on user input\r\n  const filterResponses = (userMessage) => {\r\n    const matchingResponses = [];\r\n\r\n    const filterQuery = (query) => {\r\n      const trimmedQuery = query.toLowerCase().trim();\r\n      return trimmedQuery === userMessage.toLowerCase();\r\n    };\r\n\r\n    // Filter responses from the chatData\r\n    if (chatData && chatData.responses && Array.isArray(chatData.responses)) {\r\n      chatData.responses.forEach((response) => {\r\n        const queries = response.query\r\n          .toLowerCase()\r\n          .split(\",\")\r\n          .map((query) => query.trim());\r\n\r\n        if (queries.some(filterQuery)) {\r\n          matchingResponses.push(response);\r\n        }\r\n      });\r\n    } else {\r\n      console.error(\"chatData is missing or not properly formatted.\");\r\n    }\r\n\r\n    // Filter responses from the sampleChat\r\n    if (\r\n      sampleChat &&\r\n      sampleChat.responses &&\r\n      Array.isArray(sampleChat.responses)\r\n    ) {\r\n      sampleChat.responses.forEach((response) => {\r\n        const queries = response.query\r\n          .toLowerCase()\r\n          .split(\",\")\r\n          .map((query) => query.trim());\r\n\r\n        if (queries.some(filterQuery)) {\r\n          matchingResponses.push(response);\r\n        }\r\n      });\r\n    } else {\r\n      console.error(\"sampleChat is missing or not properly formatted.\");\r\n    }\r\n\r\n    // Filter responses from the companyChat\r\n    if (\r\n      companyChat &&\r\n      companyChat.responses &&\r\n      Array.isArray(companyChat.responses)\r\n    ) {\r\n      companyChat.responses.forEach((response) => {\r\n        const queries = response.query\r\n          .toLowerCase()\r\n          .split(\",\")\r\n          .map((query) => query.trim());\r\n\r\n        if (queries.some(filterQuery)) {\r\n          matchingResponses.push(response);\r\n        }\r\n      });\r\n    } else {\r\n      console.error(\"companyChat is missing or not properly formatted.\");\r\n    }\r\n\r\n    return matchingResponses;\r\n  };\r\n\r\n  // Handler for updating user input\r\n  const handleChangeUserInput = (event) => {\r\n    setUserInput(event.target.value);\r\n  };\r\n\r\n  // Scroll to the bottom of the chat container with animation\r\n  const scrollToBottomWithAnimation = () => {\r\n    const chatContainer = chatContainerRef.current;\r\n    if (chatContainer) {\r\n      chatContainer.scrollTo({\r\n        top: chatContainer.scrollHeight,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Initialize the chat with sample messages\r\n  const initializeChat = () => {\r\n    if (\r\n      sampleChat &&\r\n      sampleChat.messages &&\r\n      Array.isArray(sampleChat.messages)\r\n    ) {\r\n      const initialMessages = sampleChat.messages.map((message) => ({\r\n        user: message.user,\r\n        message: message.message,\r\n      }));\r\n      setChatMessages(initialMessages);\r\n    } else {\r\n      console.error(\r\n        \"Sample chat messages are missing or not properly formatted.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const clearRememberedInfo = () => {\r\n      setRememberedInfo(null);\r\n      // Optionally, you can add a response indicating that the chatbot has forgotten the information.\r\n      // For example:\r\n      // const forgetResponse = {\r\n      //   user: false,\r\n      //   message: `I have forgotten the information I previously remembered.`,\r\n      // };\r\n      // setChatMessages((prevMessages) => [...prevMessages, forgetResponse]);\r\n    };\r\n\r\n    // Set a timer to clear the remembered information after the specified duration (e.g., 5 minutes)\r\n    const timer = setTimeout(clearRememberedInfo, 5 * 60 * 1000); // 5 minutes (in milliseconds)\r\n\r\n    // Clean up the timer when the component is unmounted or the rememberedInfo state changes\r\n    return () => clearTimeout(timer);\r\n  }, [rememberedInfo]);\r\n\r\n  // Initialize the chat on component mount\r\n  useEffect(() => {\r\n    initializeChat();\r\n  }, []);\r\n\r\n  // Scroll to the bottom of the chat container when chat messages change\r\n  useEffect(() => {\r\n    scrollToBottomWithAnimation();\r\n  }, [chatMessages]);\r\n\r\n  // Scroll to the bottom of the chat container when the chat container ref changes\r\n  useEffect(() => {\r\n    scrollToBottomWithAnimation();\r\n  }, [chatContainerRef.current]);\r\n\r\n  // Render the Chatbot component\r\n  return (\r\n    <>\r\n      <div className=\"wrapper centerBody\">\r\n        <div className=\"centerBot\">\r\n          <div className=\"typer\">\r\n            <TypeAnimation\r\n              sequence={[\r\n                \"Welcome to our Growth chatbot! I'm San, your vertual assistant. How can I assist you today? Feel free to ask any questions or seek guidance on your journey! 😊\",\r\n              ]}\r\n              wrapper=\"div\"\r\n              cursor={false}\r\n              repeat={true}\r\n              style={{\r\n                color: \"#269ed6\",\r\n                fontSize: \"14px\",\r\n              }}\r\n            />\r\n          </div>\r\n          <button onClick={handleToggleChatOptions} className=\"chatbotOption\">\r\n            {chatOptionsEnabled ? (\r\n              <span className=\"chatbotOptionText animated\">\r\n                Enable Typing <i className=\"fa fa-keyboard-o\"></i>\r\n              </span>\r\n            ) : (\r\n              <span className=\"chatbotOptionText\">\r\n                Enable Option <i className=\"fa fa-gear fa-spin\"></i>\r\n              </span>\r\n            )}\r\n          </button>\r\n          <hr width=\"100%\" />\r\n          {chatOptionsEnabled ? (\r\n            <ChatOptions handleChatOptionSelect={handleChatOptionSelect} />\r\n          ) : null}\r\n          <ChatbotContainer\r\n            chatMessages={chatMessages}\r\n            userInput={userInput}\r\n            handleChangeUserInput={handleChangeUserInput}\r\n            handleSendMessage={handleSendMessage}\r\n            chatContainerRef={chatContainerRef}\r\n            chatOptionsEnabled={chatOptionsEnabled}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}