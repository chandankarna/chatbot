{"ast":null,"code":"var _jsxFileName = \"D:\\\\chatbot\\\\src\\\\Components\\\\Chatbot\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { TypeAnimation } from \"react-type-animation\";\nimport ChatbotContainer from \"../ChatbotContainer/ChatbotContainer\";\nimport chatData from \"../Chats/Data.json\";\nimport sampleChat from \"../Chats/ChatSample.json\";\nimport companyChat from \"../Chats/CompanyChats.json\";\nimport ChatOptions from \"../ChatOptions/ChatOptions\";\nimport \"./Style.scss\";\n\n// Function to call the ChatGPT API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst callChatGPTAPI = async userInput => {\n  try {\n    const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n      messages: [{\n        role: \"system\",\n        content: \"You are a chatbot that can help with various inquiries.\"\n      }, {\n        role: \"user\",\n        content: userInput\n      }]\n    }, {\n      headers: {\n        Authorization: `Bearer YOUR_API_KEY`\n      }\n    });\n    return response.data; // Return the response data\n  } catch (error) {\n    console.error(\"Error calling ChatGPT API:\", error.message);\n    if (error.response) {\n      console.error(\"Server responded with:\", error.response.data);\n      console.error(\"Status code:\", error.response.status);\n      console.error(\"Headers:\", error.response.headers);\n    } else if (error.request) {\n      console.error(\"No response received. Check your internet connection.\");\n    } else {\n      console.error(\"Error setting up the request:\", error.message);\n    }\n    throw error;\n  }\n};\nconst Chatbot = () => {\n  _s();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [rememberedInfo, setRememberedInfo] = useState(null);\n  const [rememberMode, setRememberMode] = useState(false);\n  const [chatOptionsEnabled, setChatOptionsEnabled] = useState(true); // State to track whether chat options are enabled or not\n  const chatContainerRef = useRef(null);\n\n  // Optional chatbot\n  const handleToggleChatOptions = () => {\n    setChatOptionsEnabled(!chatOptionsEnabled); // Toggle the chatOptionsEnabled state\n    if (!chatOptionsEnabled) {\n      // If chat options are disabled, clear chat messages and user input\n      setChatMessages([]);\n      setUserInput(\"\");\n    }\n  };\n  const handleSendMessage = async event => {\n    event.preventDefault();\n    const trimmedInput = userInput.trim();\n    if (chatOptionsEnabled) {\n      return;\n    }\n    if (trimmedInput !== \"\") {\n      if (trimmedInput.toLowerCase().startsWith(\"remember\")) {\n        // Enter remembering mode\n        setRememberMode(true);\n        const rememberResponse = {\n          user: false,\n          message: \"Sure, I can remember one thing at a time. Please tell me what you want me to remember:\"\n        };\n        setChatMessages(prevMessages => [...prevMessages, rememberResponse]);\n        setUserInput(\"\");\n      } else if (rememberMode) {\n        const infoToRemember = trimmedInput;\n        setRememberedInfo({\n          text: infoToRemember,\n          timestamp: Date.now()\n        });\n        setRememberMode(false);\n        const rememberResponse = {\n          user: false,\n          message: `Sure, I will remember: \"${infoToRemember}\" for the next 5-10 minutes.`\n        };\n        setChatMessages(prevMessages => [...prevMessages, rememberResponse]);\n        setUserInput(\"\");\n        const aiResponse = await simulateTypingEffect(\"Great! How can I assist you further?\", 800);\n        const aiMessage = {\n          user: false,\n          message: aiResponse\n        };\n        setChatMessages(prevMessages => [...prevMessages, aiMessage]);\n        setUserInput(\"\");\n      } else if (trimmedInput.toLowerCase().includes(\"what did i tell you to remember\")) {\n        if (rememberedInfo) {\n          const rememberedResponse = {\n            user: false,\n            message: `You asked me to remember: \"${rememberedInfo.text}\"`\n          };\n          setChatMessages(prevMessages => [...prevMessages, rememberedResponse]);\n          setUserInput(\"\");\n        } else {\n          const noMemoryResponse = {\n            user: false,\n            message: \"I don't have anything to remember at the moment.\"\n          };\n          setChatMessages(prevMessages => [...prevMessages, noMemoryResponse]);\n          const apiResponse = await callChatGPTAPI(trimmedInput);\n        }\n      } else {\n        const newMessage = {\n          user: true,\n          message: trimmedInput\n        };\n        setChatMessages(prevMessages => [...prevMessages, newMessage]);\n        setUserInput(\"\");\n        scrollToBottomWithAnimation();\n        setTimeout(() => {\n          generateChatbotResponse(trimmedInput);\n        }, 1500);\n      }\n    }\n  };\n  const handleChatOptionSelect = response => {\n    const newMessage = {\n      user: false,\n      message: response\n    };\n    setChatMessages(prevMessages => [...prevMessages, newMessage]);\n  };\n  const generateChatbotResponse = async userMessage => {\n    const matchingResponses = filterResponses(userMessage);\n    if (matchingResponses.length > 0) {\n      const matchedResponse = matchingResponses[0];\n      const newMessage = {\n        user: false,\n        message: matchedResponse.answer\n      };\n      setChatMessages(prevMessages => [...prevMessages, newMessage]);\n    } else if (userMessage.toLowerCase().includes(\"current time\")) {\n      const currentTime = new Date().toLocaleTimeString();\n      const timeResponse = {\n        user: false,\n        message: `The current time is: ${currentTime}`\n      };\n      setChatMessages(prevMessages => [...prevMessages, timeResponse]);\n    } else if (userMessage.toLowerCase().includes(\"current date\")) {\n      const currentDate = new Date().toLocaleDateString();\n      const dateResponse = {\n        user: false,\n        message: `The current date is: ${currentDate}`\n      };\n      setChatMessages(prevMessages => [...prevMessages, dateResponse]);\n    } else {\n      try {\n        const result = evaluateMathExpression(userMessage);\n        if (typeof result === \"number\" && !isNaN(result) && isFinite(result)) {\n          const formattedResult = parseFloat(result.toFixed(2));\n          const mathResponse = {\n            user: false,\n            message: `The result of ${userMessage} is: ${formattedResult}`\n          };\n          setChatMessages(prevMessages => [...prevMessages, mathResponse]);\n        } else {\n          const defaultMessage = {\n            user: false,\n            message: \"Sorry, the calculation result is not valid or exceeds the limit I can handle.\"\n          };\n          setChatMessages(prevMessages => [...prevMessages, defaultMessage]);\n        }\n      } catch (error) {\n        const defaultMessage = {\n          user: false,\n          message: \"Sorry, but I'm programmed to provide information and assistance related to the stock market and our company, Growth Securities. If you have any queries or need guidance in these areas, please feel free to ask. Otherwise, please type another related word or rephrase your question.\"\n        };\n        setChatMessages(prevMessages => [...prevMessages, defaultMessage]);\n      }\n    }\n    const aiResponses = [\"I'm here to help you!\", \"Sure, I'm ready to assist.\", \"You're doing great! Keep going.\", \"Hmm, let me think...\", \"I'm learning every day to be more helpful!\", \"Great! How can I assist you further?\", \"You got it! I'm here to answer your questions.\"];\n    const aiResponse = await simulateTypingEffect(aiResponses[Math.floor(Math.random() * aiResponses.length)], 800);\n    const aiMessage = {\n      user: false,\n      message: aiResponse\n    };\n    setChatMessages(prevMessages => [...prevMessages, aiMessage]);\n    if (userMessage.toLowerCase().includes(\"stock\") || userMessage.toLowerCase().includes(\"market\")) {\n      const stockResponses = [\"Stock market is fascinating, isn't it?\", \"Remember, investing is a long-term game.\", \"Invest in knowledge before investing in stocks.\", \"I wish I could invest in humor, it would never go down.\", \"Let's stock up some knowledge!\", \"In the stock market, the only thing that goes up and down is your heartbeat.\"];\n      const stockResponse = await simulateTypingEffect(stockResponses[Math.floor(Math.random() * stockResponses.length)], 1200);\n      const stockMessage = {\n        user: false,\n        message: stockResponse\n      };\n      setChatMessages(prevMessages => [...prevMessages, stockMessage]);\n    } else if (userMessage.toLowerCase().includes(\"thank\") || userMessage.toLowerCase().includes(\"appreciate\")) {\n      const appreciationResponses = [\"You're welcome! ðŸ˜Š\", \"Glad I could help!\", \"Always here to assist you.\", \"It's my pleasure to be of service.\", \"Thank you for your kind words!\"];\n      const appreciationResponse = await simulateTypingEffect(appreciationResponses[Math.floor(Math.random() * appreciationResponses.length)], 1400);\n      const appreciationMessage = {\n        user: false,\n        message: appreciationResponse\n      };\n      setChatMessages(prevMessages => [...prevMessages, appreciationMessage]);\n    }\n  };\n  const scrollToBottomWithAnimation = () => {\n    if (chatContainerRef.current) {\n      const {\n        scrollHeight,\n        clientHeight\n      } = chatContainerRef.current;\n      const maxScrollTop = scrollHeight - clientHeight;\n      chatContainerRef.current.scroll({\n        top: maxScrollTop,\n        behavior: \"smooth\"\n      });\n    }\n  };\n  const simulateTypingEffect = async (text, delay) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(text);\n      }, delay);\n    });\n  };\n  const filterResponses = userMessage => {\n    return chatData.responses.filter(response => response.keywords.some(keyword => userMessage.toLowerCase().includes(keyword.toLowerCase())));\n  };\n  useEffect(() => {\n    const sampleMessages = sampleChat.sample.map((message, index) => ({\n      user: index % 2 === 0,\n      message: message\n    }));\n    setChatMessages(sampleMessages);\n  }, []);\n  useEffect(() => {\n    const companyMessages = companyChat.messages.map((message, index) => ({\n      user: index % 2 === 0,\n      message: message\n    }));\n    setChatMessages(companyMessages);\n  }, []);\n  useEffect(() => {\n    scrollToBottomWithAnimation();\n  }, [chatMessages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(ChatbotContainer, {\n      messages: chatMessages,\n      handleSendMessage: handleSendMessage,\n      userInput: userInput,\n      setUserInput: setUserInput,\n      handleToggleChatOptions: handleToggleChatOptions,\n      chatOptionsEnabled: chatOptionsEnabled // Pass chatOptionsEnabled as a prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), chatOptionsEnabled && /*#__PURE__*/_jsxDEV(ChatOptions, {\n      handleOptionSelect: handleChatOptionSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"yjkiRMChO6WKA8OdXX16FVUPXtM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","TypeAnimation","ChatbotContainer","chatData","sampleChat","companyChat","ChatOptions","jsxDEV","_jsxDEV","callChatGPTAPI","userInput","response","post","messages","role","content","headers","Authorization","data","error","console","message","status","request","Chatbot","_s","chatMessages","setChatMessages","setUserInput","rememberedInfo","setRememberedInfo","rememberMode","setRememberMode","chatOptionsEnabled","setChatOptionsEnabled","chatContainerRef","handleToggleChatOptions","handleSendMessage","event","preventDefault","trimmedInput","trim","toLowerCase","startsWith","rememberResponse","user","prevMessages","infoToRemember","text","timestamp","Date","now","aiResponse","simulateTypingEffect","aiMessage","includes","rememberedResponse","noMemoryResponse","apiResponse","newMessage","scrollToBottomWithAnimation","setTimeout","generateChatbotResponse","handleChatOptionSelect","userMessage","matchingResponses","filterResponses","length","matchedResponse","answer","currentTime","toLocaleTimeString","timeResponse","currentDate","toLocaleDateString","dateResponse","result","evaluateMathExpression","isNaN","isFinite","formattedResult","parseFloat","toFixed","mathResponse","defaultMessage","aiResponses","Math","floor","random","stockResponses","stockResponse","stockMessage","appreciationResponses","appreciationResponse","appreciationMessage","current","scrollHeight","clientHeight","maxScrollTop","scroll","top","behavior","delay","Promise","resolve","responses","filter","keywords","some","keyword","sampleMessages","sample","map","index","companyMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleOptionSelect","_c","$RefreshReg$"],"sources":["D:/chatbot/src/Components/Chatbot/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TypeAnimation } from \"react-type-animation\";\r\nimport ChatbotContainer from \"../ChatbotContainer/ChatbotContainer\";\r\nimport chatData from \"../Chats/Data.json\";\r\nimport sampleChat from \"../Chats/ChatSample.json\";\r\nimport companyChat from \"../Chats/CompanyChats.json\";\r\nimport ChatOptions from \"../ChatOptions/ChatOptions\";\r\n\r\nimport \"./Style.scss\";\r\n\r\n// Function to call the ChatGPT API\r\nconst callChatGPTAPI = async (userInput) => {\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://api.openai.com/v1/chat/completions\",\r\n      {\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: \"You are a chatbot that can help with various inquiries.\",\r\n          },\r\n          { role: \"user\", content: userInput },\r\n        ],\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer YOUR_API_KEY`,\r\n        },\r\n      }\r\n    );\r\n\r\n    return response.data; // Return the response data\r\n  } catch (error) {\r\n    console.error(\"Error calling ChatGPT API:\", error.message);\r\n    if (error.response) {\r\n      console.error(\"Server responded with:\", error.response.data);\r\n      console.error(\"Status code:\", error.response.status);\r\n      console.error(\"Headers:\", error.response.headers);\r\n    } else if (error.request) {\r\n      console.error(\"No response received. Check your internet connection.\");\r\n    } else {\r\n      console.error(\"Error setting up the request:\", error.message);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\nconst Chatbot = () => {\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [rememberedInfo, setRememberedInfo] = useState(null);\r\n  const [rememberMode, setRememberMode] = useState(false);\r\n  const [chatOptionsEnabled, setChatOptionsEnabled] = useState(true); // State to track whether chat options are enabled or not\r\n  const chatContainerRef = useRef(null);\r\n\r\n  // Optional chatbot\r\n  const handleToggleChatOptions = () => {\r\n    setChatOptionsEnabled(!chatOptionsEnabled); // Toggle the chatOptionsEnabled state\r\n    if (!chatOptionsEnabled) {\r\n      // If chat options are disabled, clear chat messages and user input\r\n      setChatMessages([]);\r\n      setUserInput(\"\");\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (event) => {\r\n    event.preventDefault();\r\n    const trimmedInput = userInput.trim();\r\n    if (chatOptionsEnabled) {\r\n      return;\r\n    }\r\n    if (trimmedInput !== \"\") {\r\n      if (trimmedInput.toLowerCase().startsWith(\"remember\")) {\r\n        // Enter remembering mode\r\n        setRememberMode(true);\r\n        const rememberResponse = {\r\n          user: false,\r\n          message:\r\n            \"Sure, I can remember one thing at a time. Please tell me what you want me to remember:\",\r\n        };\r\n        setChatMessages((prevMessages) => [...prevMessages, rememberResponse]);\r\n        setUserInput(\"\");\r\n      } else if (rememberMode) {\r\n        const infoToRemember = trimmedInput;\r\n        setRememberedInfo({ text: infoToRemember, timestamp: Date.now() });\r\n        setRememberMode(false);\r\n\r\n        const rememberResponse = {\r\n          user: false,\r\n          message: `Sure, I will remember: \"${infoToRemember}\" for the next 5-10 minutes.`,\r\n        };\r\n        setChatMessages((prevMessages) => [...prevMessages, rememberResponse]);\r\n\r\n        setUserInput(\"\");\r\n\r\n        const aiResponse = await simulateTypingEffect(\r\n          \"Great! How can I assist you further?\",\r\n          800\r\n        );\r\n        const aiMessage = {\r\n          user: false,\r\n          message: aiResponse,\r\n        };\r\n\r\n        setChatMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n\r\n        setUserInput(\"\");\r\n      } else if (\r\n        trimmedInput.toLowerCase().includes(\"what did i tell you to remember\")\r\n      ) {\r\n        if (rememberedInfo) {\r\n          const rememberedResponse = {\r\n            user: false,\r\n            message: `You asked me to remember: \"${rememberedInfo.text}\"`,\r\n          };\r\n          setChatMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            rememberedResponse,\r\n          ]);\r\n\r\n          setUserInput(\"\");\r\n        } else {\r\n          const noMemoryResponse = {\r\n            user: false,\r\n            message: \"I don't have anything to remember at the moment.\",\r\n          };\r\n          setChatMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            noMemoryResponse,\r\n          ]);\r\n\r\n          const apiResponse = await callChatGPTAPI(trimmedInput);\r\n        }\r\n      } else {\r\n        const newMessage = {\r\n          user: true,\r\n          message: trimmedInput,\r\n        };\r\n\r\n        setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n\r\n        setUserInput(\"\");\r\n\r\n        scrollToBottomWithAnimation();\r\n\r\n        setTimeout(() => {\r\n          generateChatbotResponse(trimmedInput);\r\n        }, 1500);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChatOptionSelect = (response) => {\r\n    const newMessage = {\r\n      user: false,\r\n      message: response,\r\n    };\r\n    setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n  };\r\n\r\n  const generateChatbotResponse = async (userMessage) => {\r\n    const matchingResponses = filterResponses(userMessage);\r\n\r\n    if (matchingResponses.length > 0) {\r\n      const matchedResponse = matchingResponses[0];\r\n      const newMessage = {\r\n        user: false,\r\n        message: matchedResponse.answer,\r\n      };\r\n      setChatMessages((prevMessages) => [...prevMessages, newMessage]);\r\n    } else if (userMessage.toLowerCase().includes(\"current time\")) {\r\n      const currentTime = new Date().toLocaleTimeString();\r\n      const timeResponse = {\r\n        user: false,\r\n        message: `The current time is: ${currentTime}`,\r\n      };\r\n\r\n      setChatMessages((prevMessages) => [...prevMessages, timeResponse]);\r\n    } else if (userMessage.toLowerCase().includes(\"current date\")) {\r\n      const currentDate = new Date().toLocaleDateString();\r\n      const dateResponse = {\r\n        user: false,\r\n        message: `The current date is: ${currentDate}`,\r\n      };\r\n\r\n      setChatMessages((prevMessages) => [...prevMessages, dateResponse]);\r\n    } else {\r\n      try {\r\n        const result = evaluateMathExpression(userMessage);\r\n        if (typeof result === \"number\" && !isNaN(result) && isFinite(result)) {\r\n          const formattedResult = parseFloat(result.toFixed(2));\r\n          const mathResponse = {\r\n            user: false,\r\n            message: `The result of ${userMessage} is: ${formattedResult}`,\r\n          };\r\n\r\n          setChatMessages((prevMessages) => [...prevMessages, mathResponse]);\r\n        } else {\r\n          const defaultMessage = {\r\n            user: false,\r\n            message:\r\n              \"Sorry, the calculation result is not valid or exceeds the limit I can handle.\",\r\n          };\r\n\r\n          setChatMessages((prevMessages) => [...prevMessages, defaultMessage]);\r\n        }\r\n      } catch (error) {\r\n        const defaultMessage = {\r\n          user: false,\r\n          message:\r\n            \"Sorry, but I'm programmed to provide information and assistance related to the stock market and our company, Growth Securities. If you have any queries or need guidance in these areas, please feel free to ask. Otherwise, please type another related word or rephrase your question.\",\r\n        };\r\n\r\n        setChatMessages((prevMessages) => [...prevMessages, defaultMessage]);\r\n      }\r\n    }\r\n\r\n    const aiResponses = [\r\n      \"I'm here to help you!\",\r\n      \"Sure, I'm ready to assist.\",\r\n      \"You're doing great! Keep going.\",\r\n      \"Hmm, let me think...\",\r\n      \"I'm learning every day to be more helpful!\",\r\n      \"Great! How can I assist you further?\",\r\n      \"You got it! I'm here to answer your questions.\",\r\n    ];\r\n\r\n    const aiResponse = await simulateTypingEffect(\r\n      aiResponses[Math.floor(Math.random() * aiResponses.length)],\r\n      800\r\n    );\r\n    const aiMessage = {\r\n      user: false,\r\n      message: aiResponse,\r\n    };\r\n\r\n    setChatMessages((prevMessages) => [...prevMessages, aiMessage]);\r\n\r\n    if (\r\n      userMessage.toLowerCase().includes(\"stock\") ||\r\n      userMessage.toLowerCase().includes(\"market\")\r\n    ) {\r\n      const stockResponses = [\r\n        \"Stock market is fascinating, isn't it?\",\r\n        \"Remember, investing is a long-term game.\",\r\n        \"Invest in knowledge before investing in stocks.\",\r\n        \"I wish I could invest in humor, it would never go down.\",\r\n        \"Let's stock up some knowledge!\",\r\n        \"In the stock market, the only thing that goes up and down is your heartbeat.\",\r\n      ];\r\n\r\n      const stockResponse = await simulateTypingEffect(\r\n        stockResponses[Math.floor(Math.random() * stockResponses.length)],\r\n        1200\r\n      );\r\n      const stockMessage = {\r\n        user: false,\r\n        message: stockResponse,\r\n      };\r\n\r\n      setChatMessages((prevMessages) => [...prevMessages, stockMessage]);\r\n    } else if (\r\n      userMessage.toLowerCase().includes(\"thank\") ||\r\n      userMessage.toLowerCase().includes(\"appreciate\")\r\n    ) {\r\n      const appreciationResponses = [\r\n        \"You're welcome! ðŸ˜Š\",\r\n        \"Glad I could help!\",\r\n        \"Always here to assist you.\",\r\n        \"It's my pleasure to be of service.\",\r\n        \"Thank you for your kind words!\",\r\n      ];\r\n\r\n      const appreciationResponse = await simulateTypingEffect(\r\n        appreciationResponses[\r\n          Math.floor(Math.random() * appreciationResponses.length)\r\n        ],\r\n        1400\r\n      );\r\n      const appreciationMessage = {\r\n        user: false,\r\n        message: appreciationResponse,\r\n      };\r\n\r\n      setChatMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        appreciationMessage,\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const scrollToBottomWithAnimation = () => {\r\n    if (chatContainerRef.current) {\r\n      const { scrollHeight, clientHeight } = chatContainerRef.current;\r\n      const maxScrollTop = scrollHeight - clientHeight;\r\n      chatContainerRef.current.scroll({\r\n        top: maxScrollTop,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const simulateTypingEffect = async (text, delay) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(text);\r\n      }, delay);\r\n    });\r\n  };\r\n\r\n  const filterResponses = (userMessage) => {\r\n    return chatData.responses.filter((response) =>\r\n      response.keywords.some((keyword) =>\r\n        userMessage.toLowerCase().includes(keyword.toLowerCase())\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const sampleMessages = sampleChat.sample.map((message, index) => ({\r\n      user: index % 2 === 0,\r\n      message: message,\r\n    }));\r\n\r\n    setChatMessages(sampleMessages);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const companyMessages = companyChat.messages.map((message, index) => ({\r\n      user: index % 2 === 0,\r\n      message: message,\r\n    }));\r\n\r\n    setChatMessages(companyMessages);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottomWithAnimation();\r\n  }, [chatMessages]);\r\n\r\n  return (\r\n    <div className=\"chatbot\">\r\n      <ChatbotContainer\r\n        messages={chatMessages}\r\n        handleSendMessage={handleSendMessage}\r\n        userInput={userInput}\r\n        setUserInput={setUserInput}\r\n        handleToggleChatOptions={handleToggleChatOptions}\r\n        chatOptionsEnabled={chatOptionsEnabled} // Pass chatOptionsEnabled as a prop\r\n      />\r\n      {chatOptionsEnabled && (\r\n        <ChatOptions handleOptionSelect={handleChatOptionSelect} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}